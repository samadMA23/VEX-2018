#pragma config(Sensor, dgtl1,  auton1,         sensorTouch)
#pragma config(Sensor, dgtl2,  auton2,         sensorTouch)
#pragma config(Sensor, dgtl3,  auton3,         sensorTouch)
#pragma config(Motor,  port2,           frontrightmotor, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           frontleftmotor, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           backrightmotor, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           backleftmotor, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           arm1,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           arm2,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           fliptable,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           arm1top,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          arm2top,       tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/

/*                                                                           */

/*        Description: Competition template for VEX EDR                      */

/*                                                                           */

/*---------------------------------------------------------------------------*/



// This code is for the VEX cortex platform

#pragma platform(VEX2)



// Select Download method as "competition"

#pragma competitionControl(Competition)



//Main competition background code...do not modify!

#include "Vex_Competition_Includes.c"



int autoplace = -1;

void pre_auton()

{


	bStopTasksBetweenModes = true;
	while(bIfiRobotDisabled)
	{
		if(SensorValue[auton1]== 1)autoplace = 0; // RED AUTONOMOUS
			if(SensorValue[auton2]== 1)autoplace = 1; // BLUEAUTONOMOUS
			if(SensorValue[auton3]== 1)autoplace = 2; //skillsautonomous

	}
}


void stop_Robot()

{
	// stop the robot
	motor[frontrightmotor] = 0;
	motor[backrightmotor] = 0;
	motor[frontleftmotor] =0;
	motor[backleftmotor] = 0;
	motor[fliptable] = 0;
	motor[arm1] = 0;
	motor[arm2] = 0;
	motor[arm1top] = 0;
	motor[arm2top] = 0;




}
void forward()

{
	// go forward
	motor[frontrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	motor[backleftmotor] = 127;

}

void blueAuton(){
	// go backwards go forward turnright flipdown go forwards flip upwards stop robot

	// backward for 2 seconds
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	motor[frontleftmotor] = -127;
	motor[backleftmotor] = -127;
	wait1Msec(2000);
	stop_Robot();
	// forward for 2 seconds
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	wait1Msec(2000);
	stop_Robot();
	// turn right for 1.52 secoonds
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	wait1Msec(1300);
	stop_Robot();
	//flip downwards for .75 seconds
	motor[fliptable] = -127;
	wait1Msec(750);
	stop_Robot();
	// forward for 1.6 seconds
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	wait1Msec(1600);
	stop_Robot();
	// flip upwards for .75 seconds
	motor[fliptable] = 127;
	wait1Msec(750);
	stop_Robot();
}

void redAuton() {
	// go backwards go forward turnright flipdown go forwards flip upwards stop robot

	// backward for 2 seconds
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	motor[frontleftmotor] = -127;
	motor[backleftmotor] = -127;
	wait1Msec(2000);
	stop_Robot();
	// forward for 2 seconds
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	wait1Msec(2000);
	stop_Robot();
	// turn left for 1.52 secoonds
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = -127;
	motor[backleftmotor] = -127;
	wait1Msec(1300);
	stop_Robot();
	//flip downwards for .75 seconds
	motor[fliptable] = -127;
	wait1Msec(750);
	stop_Robot();
	// forward for 1.6 seconds
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	wait1Msec(1600);
	stop_Robot();
	// flip upwards for .75 seconds
	motor[fliptable] = 127;
	wait1Msec(750);
	stop_Robot();
}

void skillsAuton() {
	// go backwards go forward turn right go forward turn left gobackwards turn left flip cap turn around go forward
	//pickup cap turn right go forward turn left go forward stackcap
	//go bcakwards for 2 seconds
	motor[frontrightmotor] = -127;
	motor[frontleftmotor] = -127;
	motor[backrightmotor] = -127;
	motor[backleftmotor] = - 127;
	wait1Msec(2000);
	stop_Robot();
	// go forward for 1 second
	motor[frontrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	motor[backleftmotor] = 127;
	wait1Msec(1000);
	stop_Robot();
	// turn left
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] =  -127;
	motor[ backrightmotor] = -127;
	wait1Msec(500);
	stop_Robot();
	// go forwards for 2 seconds
	motor[frontrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	motor[backleftmotor] = 127;
	wait1Msec(2000);
	// turn left
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	wait1Msec(500);
	// go frowards for .2 seconds
	motor[frontrightmotor] = 127;
	motor[frontleftmotor] = 127;
	motor[backrightmotor] = 127;
	motor[backleftmotor] = 127;
	wait1Msec(200);
	// go backwards
	motor[frontrightmotor] = -127;
	motor[frontleftmotor] = -127;
	motor[backleftmotor] = -127;
	motor[backrightmotor] = -127;
	wait1Msec(400);
	stop_Robot ();
	// turn left
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	wait1Msec(500);
	stop_Robot();
	// go forwards
	forward();
	wait1Msec(400);
	stop_Robot();
	// flip cap go forward
	motor[fliptable] = -127;
	forward();
	wait1Msec(200);
	stop_Robot();
	// turn around
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	wait1Msec(500);
	stop_Robot();
	// go forward
	forward();
	wait1Msec(500);
	stop_Robot();
	// pick up cap
	motor[fliptable] = 127;
	wait1Msec(400);
	stop_Robot();
	forward();
	wait1Msec(100);
	stop_Robot();
	motor[fliptable] = -127;
	wait1Msec(400);
	stop_Robot();
	// turn right
	motor[frontrightmotor] = 127;
	motor[backrightmotor] = 127;
	motor[frontleftmotor] = -127;
	motor[backleftmotor] = -127;
	wait1Msec(500);
	stop_Robot();
	//forward
	forward();
	wait1Msec(1000);
	stop_Robot();
	//turn left
	motor[frontleftmotor] = 127;
	motor[backleftmotor] = 127;
	motor[frontrightmotor] = -127;
	motor[backrightmotor] = -127;
	//raise arm
	motor[arm1] = 127;
	motor[arm1top] = 127;
	motor[arm2] = 127;
	motor[arm2top] = 127;
	wait1Msec(1000);
	stop_Robot();
	//froward
	forward();
	wait1Msec(200);
	stop_Robot();
	// lower cap
	motor[fliptable] = 127;
	wait1Msec(100);
	stop_Robot();






}







task autonomous()
{
	switch(autoplace){
	case 0:
		redAuton();
		break;
	case 1:
		blueAuton();
		break;
	case 2:
		skillsAuton();
		break;
	default:
		break;
	}
}

task usercontrol()

{





	while (true)

	{


		motor[frontleftmotor]  = vexRT[Ch3];
		motor[backleftmotor]  = vexRT[Ch3];
		motor[frontrightmotor] = vexRT[Ch2];
		motor[backrightmotor] = vexRT[Ch2];


		motor[arm1] = vexRT[Ch2Xmtr2];
		motor[arm2] = vexRT[Ch2Xmtr2];
		motor[arm1top] = vexRT[Ch2Xmtr2];
		motor[arm2top] = vexRT[Ch2Xmtr2];



		motor[fliptable] = vexRT[Ch3Xmtr2];



	}

}
